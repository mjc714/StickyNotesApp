@model StickyNotesApp.Models.Todo

@{
    ViewData["Title"] = "Create";
}

<h2>Create a new Todo Note</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="CreateAuth">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="OwnerID" class="control-label"></label>
                <input asp-for="OwnerID" class="form-control" value="@User.Identity.Name" readonly />
            </div>
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <textarea class="form-control" rows="4" cols="50" asp-for="Description"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ExpireDate" class="control-label"></label>
                <input id="expDate" asp-for="ExpireDate" class="form-control" />
                <div id="pastError" class="alert alert-danger hidden" role="alert">Cannot set date to the past.</div>
                <div id="dateError" class="alert alert-danger hidden" role="alert">Invalid Date.</div>
                <span asp-validation-for="ExpireDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input id="create" type="submit" value="Create" class="btn btn-primary btn-lg" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="IndexAuth">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

    <script type="text/javascript">
        $(function () {
            var id = '#expDate';
            var now = new Date();
            var dateChange = $(id).val();

            // Clear any time component from the date.
            now.setHours(0, 0, 0, 0);

            // Append '0' to day/month < 10.
            var day = ("0" + now.getDate()).slice(-2);
            var month = ("0" + (now.getMonth() + 1)).slice(-2);

            // Create a date string from Date object values.
            var today = now.getFullYear() + "-" + (month) + "-" + (day);

            var parseToday = today.split('-');

            console.log(parseToday);

            var numYear = parseInt(parseToday[0], 10);
            var numMonth = parseInt(parseToday[1], 10);
            var numDate = parseInt(parseToday[2], 10);

            // Set the input's value to today's date.
            $(id).val(today);

            // Runs whenever the input date is changed.
            $(id).change(function () {
                // Reset the disable attribute for the submit button.
                $('#create').attr('disabled', false);
                $('#dateError').addClass('hidden');
                // Get the value from the date input.
                dateChange = $(id).val();
                var parseDate = dateChange.split('-');

                //console.log(parseDate);
                if (parseDate[0] === "") {
                    $('#dateError').removeClass('hidden');
                    $('#create').attr('disabled', true);
                }
                var newYear = parseInt(parseDate[0], 10);
                var newMonth = parseInt(parseDate[1], 10);
                var newDate = parseInt(parseDate[2], 10);

                if (newYear > numYear) { // guaranteed future
                    $(id).val(dateChange);
                    $('#pastError').addClass('hidden');
                } else if (newYear < numYear) { // in the past
                    $('#pastError').removeClass('hidden');
                    $('#create').attr('disabled', true);
                } else if (newYear === numYear) { // same year
                    // Check Month
                    if (newMonth > numMonth) { // future
                        $(id).val(dateChange);
                        $('#pastError').addClass('hidden');
                    } else if (newMonth < numMonth) { // in the past
                        $('#pastError').removeClass('hidden');
                        $('#create').attr('disabled', true);
                    } else if (newMonth === numMonth) { // same timeline
                        // Check Date
                        if (newDate > numDate) {
                            $(id).val(dateChange);
                            $('#pastError').addClass('hidden');
                        } else if (newDate === numDate) {
                            $(id).val(dateChange);
                            $('#pastError').addClass('hidden');
                        } else if (newDate < numDate) {
                            $('#pastError').removeClass('hidden');
                            $('#create').attr('disabled', true);
                        }
                    }
                }
            });
        });
    </script>
}
